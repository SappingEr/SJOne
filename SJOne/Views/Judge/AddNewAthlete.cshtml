@using SJOne.Models.JudgeViewModels
@model SJOne.Models.JudgeViewModels.AddAthleteViewModel


@{
    ViewBag.Title = "Новый участник";
}

<div class="jumbotron bg-warning text-white">
    <h2>Новый участник</h2>
    <h4>Регистрация</h4>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Name)
                <div>
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", style = "text-transform: capitalize", autofocus = "autofocus" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Surname)
                <div>
                    @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", style = "text-transform: capitalize" } })
                    @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Gender)
                <div>
                    @Html.EnumDropDownListFor(model => model.Gender, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.DOB)
                <div>
                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.RegionId)
                <div>
                    @Html.DropDownListFor(model => model.RegionId, Model.Regions, new { @id = "regionList", @class = "selectpicker", @data_live_search = "true" })
                    @Html.ValidationMessageFor(model => model.RegionId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="localities" class="form-group offset-1">

                @Html.LabelFor(model => model.LocalityId)
                <div class="input-group">
                    @Html.DropDownListFor(model => model.LocalityId, Model.Localities, new {@id = "localityList", @class = "selectpicker", @data_live_search = "true" })
                    @Html.ValidationMessageFor(model => model.LocalityId, "", new { @class = "text-danger" })
                    <div class="input-group-append">
                        <button id="newLocality" class="btn btn-secondary" type="button"><span class="octicon octicon-pencil"></span></button>
                    </div>
                </div>

            </div>

            <div id="newLocalityForm">
                <div class="form-group offset-1">
                    <label>Новый населённый пункт</label>
                    <div class="input-group">
                        <input type="text" name="Locality" id="locality" class="form-control" />
                        <div class="input-group-append">
                            <button id="addLocality" class="btn btn-success" type="button" disabled><span class="octicon octicon-plus"></span></button>
                        </div>
                        <div class="input-group-append">
                            <button id="toListLocality" class="btn btn-outline-info" type="button"><span class="octicon octicon-x"></span></button>
                        </div>
                    </div>

                </div>
            </div>

            <hr />


            <div class="form-group offset-1 custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="switch1">
                <label class="custom-control-label font-weight-bolder" for="switch1"> Клуб</label>
            </div>



            <div id="clubSelect" class="offset-1">
                @Html.Action("AddSportClub", "Judge", new { regionId = Model.RegionId, localityId = Model.LocalityId })
            </div>

        </div>

        <div class="col-sm-5 jumbotron bg-warning">
            <div>
                Поля &laquo;Email&raquo; и &laquo;Номер телефона&raquo; не являются обязательными для заполнения.
                Данная информация нужна для рассылки результатов соревнования.<br /> <br />
                <p class="bg-danger text-black">Необходимо согласие спортсмена на обработку и хранение персональных данных!</p>

            </div>
            <br />

            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="switch2">
                <label class="custom-control-label" for="switch2">Активировать формы</label>
            </div>
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Email)
                <div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @id = "email", @class = "form-control", disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.PhoneNumber)
                <div>
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @id = "phoneNum", @class = "form-control", disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>


    <hr />

    <div>
        <button tupe="submit" class="btn btn-success"><span class="octicon octicon-plus"></span> Зарегистрировать</button>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-select")
    <script>


        $(document).ready(function () {

            $(function () {
                $('.selectpicker').selectpicker();
            });

            $('#clubSelect, #newClubLocalityForm, #newClubForm, #newLocalityForm').hide();

            function refreshListLocality(regionId) {
                 $.ajax({
                      type: 'GET',
                      url: '@Url.Action("LocalitiesDropDownList")/' + regionId,
                      success: function (data) {
                          $('#localities').html(data);
                      }
                 });
            }            

            $('#regionList').change(function () {
                var regionId = $(this).val();
                refreshListLocality(regionId);
            });

            $(document).on('click', '#newLocality', function () {
                $('#newLocalityForm').show();
                $('#localities').hide();
                $('#locality').focus();
                $('#locality').keyup(function () {
                    if ($(this).val() != '') {
                        $('#addLocality').prop('disabled', false);
                    }
                    else {
                        $('#addLocality').prop('disabled', true);
                    }
                });
            });            

            $('#addLocality').click(function () {
                $('#newLocalityForm').hide();
                $('#localities').show();
                var locality = $('#locality').val();
                var regionId = $('#regionList').val();

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddNewLocality", "Judge")',
                    dataType: 'json',
                    data: { id: regionId, name: locality },
                    success: function (response) {
                        alert(response.responseText);
                        $('#locality').val('');
                        refreshListLocality(regionId);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });            
            $('#toListLocality').click(function () {
                $('#newLocalityForm').hide();
                $('#locality').val('');
                $('#addLocality').prop('disabled', true);
                $('#localities').show();
            });  





            $('#switch1').click(function () {
                $('#clubSelect').toggle("slow");
            });

            function refreshClubListLocality(clubRegionId) {
                 $.ajax({
                      type: 'GET',
                      url: '@Url.Action("LocalitiesDropDownList")/' + clubRegionId,
                      success: function (data) {
                          $('#clubLocalities').html(data);
                      }
                 });
            }

            function refreshListClubs(regionClubId, localityClubId) {
                 $.ajax({
                     type: 'GET',
                     url: '@Url.Action("SportClubDropDownList")/' + regionClubId + '?localityId=' + localityClubId,
                     success: function (data) {
                         $('#clubs').html(data);
                     }
                 });
            }

            $(document).on('change', '#clubRegionList', function () {
                var clubRegionId = $(this).val();
                var clubLocalityId = null;
                refreshClubListLocality(clubRegionId);
                refreshListClubs(clubRegionId, clubLocalityId);
                $('#clubLocalities').html(data);
            });

             $(document).on('change', '#clubLocalityList', function () {
                var localityId = $(this).val();
                var regionId = $('#clubRegionList').val();
                refreshListClubs(regionId, localityId);
             });

            $(document).on('click', '#newClubLocality', function () {
                $('#newClubLocalityForm').show();
                $('#clubLocalities').hide();
                $('#clubLocality').focus();
                $('#clubLocality').keyup(function () {
                    if ($(this).val() != '') {

                        $('#addClubLocality').prop('disabled', false);
                    }
                    else {
                        $('#addClubLocality').prop('disabled', true);
                    }
                });
            });

            $('#toListClubLocality').click(function () {
                $('#newClubLocalityForm').hide();
                $('#clubLocality').val('');
                $('#toAddClubLocality').prop('disabled', true);
                $('#clubLocalities').show();
            });


            $(document).on('click', '#newClub', function () {
                $('#newClubForm').show();
                $('#clubs').hide();
                $('#club').focus();
                $('#club').keyup(function () {
                    if ($(this).val() != '') {
                        $('#addClub').prop('disabled', false);
                    }
                    else {
                        $('#addClub').prop('disabled', true);
                    }
                });
            });

             $('#toListClub').click(function () {
                $('#newClubForm').hide();
                $('#club').val('');
                $('#AddClub').prop('disabled', true);
                $('#clubs').show();
            });

            $(document).on('click', '#addClubLocality', function () {
                $('#newClubLocalityForm').hide();
                $('#clubLocalities').show();
                var clubLocality = $('#clubLocality').val();
                var clubRegionId = $('#clubRegionId').val();

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddNewLocality", "Judge")',
                    dataType: 'json',
                    data: { id: clubRegionId, name: clubLocality },
                    success: function (response) {
                        alert(response.responseText);
                        $('#clubLocality').val('');
                        refreshClubListLocality(id);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });

            $(document).on('click', '#addClub', function () {
                var regionClubId = $('#clubRegionList').val();
                var localityClubId = $('#clubLocalityList').val();
                var club = $('#club').val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddNewSportClub", "Judge")',
                    dataType: 'json',
                    data: { id: regionClubId, localityId: localityClubId, name: club },
                    success: function (response) {
                        alert(response.responseText);
                        $('#club').val('');
                        refreshListClubs(regionId, localityId);
                        $('#newClubForm').hide();
                        $('#clubs').show();
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });           

            $('#switch2').click(function () {
                if ($('#email, #phoneNum').prop('disabled')) {
                    $('#email, #phoneNum').prop('disabled', false);
                }
                else {
                    $('#email, #phoneNum').prop('disabled', true);
                }

            });

        });



    </script>

}
