@using SJOne.Models.JudgeViewModels
@model SJOne.Models.JudgeViewModels.AddAthleteViewModel


@{
    ViewBag.Title = "Новый участник";
}

<div class="jumbotron bg-warning text-white">
    <h2>Новый участник</h2>
    <h4>(Регистрация)</h4>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()




    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="row">
        <div class="col-sm-6">
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Name)
                <div>
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", style = "text-transform: capitalize" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Surname)
                <div>
                    @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", style = "text-transform: capitalize" } })
                    @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Gender)
                <div>
                    @Html.DropDownListFor(model => model.Gender, new SelectList(new string[] { "Мужской", "Женский" }), "- Выберите пол -", new { @class = "custom-select" })
                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.DOB)
                <div>
                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Regions)
                <div>
                    @Html.DropDownListFor(model => model.RegionId, Model.Regions, new { @id = "region", @class = "selectpicker", @data_live_search = "true" })
                    @Html.ValidationMessageFor(model => model.Regions, "", new { @class = "text-danger" })
                </div>
            </div>

            <div id="localities">
                <div class="form-group offset-1">
                    @Html.LabelFor(model => model.Localities)
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.LocalityId, Model.Localities, new { @class = "selectpicker", @data_live_search = "true" })
                        @Html.ValidationMessageFor(model => model.Localities, "", new { @class = "text-danger" })
                        <div class="input-group-append">
                            <button id="newLocality" class="btn btn-secondary" type="button"><span class="octicon octicon-pencil"></span></button>
                        </div>
                    </div>
                </div>
            </div>

            <div id="newLocalityForm">
                <div class="form-group offset-1">
                    <label>Новый населенный пункт</label>
                    <div class="input-group">
                        <input type="text" name="Locality" id="locality" class="form-control" />
                        <div class="input-group-append">
                            <button id="toAddLocality" class="btn btn-success" type="button" disabled><span class="octicon octicon-plus"></span></button>
                        </div>
                        <div class="input-group-append">
                            <button id="toListLocality" class="btn btn-outline-info" type="button"><span class="octicon octicon-x"></span></button>
                        </div>
                    </div>

                </div>
            </div>

            <div id="clubs">
                <div class="form-group offset-1">
                    @Html.LabelFor(model => model.Clubs)
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.ClubId, Model.Clubs, "- Нет клуба -", new { @class = "selectpicker", @data_live_search = "true" })
                        @Html.ValidationMessageFor(model => model.Clubs, "", new { @class = "text-danger" })
                        <div class="input-group-append">
                            <button id="newClub" class="btn btn-secondary" type="button"><span class="octicon octicon-pencil"></span></button>
                        </div>
                    </div>
                </div>
            </div>


            <div id="newClubForm">
                <div class="form-group offset-1">
                    <label>Новый клуб</label>
                    <div class="input-group">
                        <input type="text" name="Club" id="club" class="form-control" />
                        <div class="input-group-append">
                            <button id="toAddClub" class="btn btn-success" type="button" disabled><span class="octicon octicon-plus"></span></button>
                        </div>
                        <div class="input-group-append">
                            <button id="toListClub" class="btn btn-outline-info" type="button"><span class="octicon octicon-x"></span></button>
                        </div>
                    </div>

                </div>
            </div>


        </div>
        <div class="col-sm-5 jumbotron bg-warning">
            <div>
                Поля &laquo;Email&raquo; и &laquo;Номер телефона&raquo; не являются обязательными для заполнения.
                Данная информация нужна для рассылки результатов соревнования.<br /> <br />
                <p class="bg-danger text-black">Необходимо согласие спортсмена на обработку и хранение персональных данных!</p>
                
            </div>
            <br />

            <div class="custom-control custom-switch">
                <input type="checkbox" class="custom-control-input" id="switch1">
                <label class="custom-control-label" for="switch1">Активировать формы</label>
            </div>
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.Email)
                <div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @id="disabledForm", @class = "form-control", disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group offset-1">
                @Html.LabelFor(model => model.PhoneNumber)
                <div>
                    @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @id="disabledForm2", @class = "form-control", disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>


    <hr />

    <div>
        <button tupe="submit" class="btn btn-success"><span class="octicon octicon-plus"></span> Зарегистрировать</button>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/bootstrap-select")
    <script>


        $(document).ready(function () {

            $(function () {
                $('.selectpicker').selectpicker();
            });

            $('#newLocalityForm, #newClubForm').hide();

            function refreshListLocality(id) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("LocalitiesDropDownList")/' + id,
                    success: function (data) {
                        $('#localities').html(data);
                    }
                });
            }

            function refreshListClubs() {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("SportClubDropDownList")',
                    success: function (data) {
                        $('#clubs').html(data);
                    }
                });
            }

            $('#region').change(function () {
                var id = $(this).val();
                refreshListLocality(id);
            });

            $('#newLocality').click(function () {
                $('#newLocalityForm').show();
                $('#localities').hide();
                $('#locality').focus();
                $('#locality').keyup(function () {
                    if ($(this).val() != '') {
                        $('#toAddLocality').prop('disabled', false);
                    }
                    else {
                        $('#toAddLocality').prop('disabled', true);
                    }
                });
            });

            $('#toAddLocality').click(function () {
                $('#newLocalityForm').hide();
                $('#localities').show();
                var locality = $('#locality').val();
                var id = $('#region').val();

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddNewLocality", "Judge")',
                    dataType: 'json',
                    data: { id: id, name: locality },
                    success: function (response) {
                        alert(response.responseText);
                        $('#locality').val('');
                        refreshListLocality(id);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });

            $('#toListLocality').click(function () {
                $('#newLocalityForm').hide();
                $('#locality').val('');
                $('#toAdd').prop('disabled', true);
                $('#localities').show();
            });

            $('#newClub').click(function () {
                $('#newClubForm').show();
                $('#clubs').hide();
                $('#club').focus();
                $('#club').keyup(function () {
                    if ($(this).val() != '') {
                        $('#toAddClub').prop('disabled', false);
                    }
                    else {
                        $('#toAddClub').prop('disabled', true);
                    }
                });
            });

            $('#toAddClub').click(function () {
                $('#newClubForm').hide();
                $('#clubs').show();
                var club = $('#club').val();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("AddNewSportClub", "Judge")',
                    dataType: 'json',
                    data: { name: club },
                    success: function (response) {
                        alert(response.responseText);
                        $('#club').val('');
                        refreshListClubs();
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            });

            $('#toListClub').click(function () {
                $('#newClubForm').hide();
                $('#club').val('');
                $('#toAddClub').prop('disabled', true);
                $('#clubs').show();
            });     

            $('#switch1').click(function () {
                if ($('#disabledForm, #disabledForm2').prop('disabled')) {
                    $('#disabledForm, #disabledForm2').prop('disabled', false);
                }
                else {
                    $('#disabledForm, #disabledForm2').prop('disabled', true);
                }
                
            });

        });

       

    </script>

}
